basePath: /api/v1
definitions:
  dto.CreateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - name
    - price
    type: object
  dto.Response:
    properties:
      data: {}
      error:
        type: string
      errors: {}
      success:
        type: boolean
    type: object
  dto.StockCheckRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    required:
    - product_id
    type: object
  dto.StockUpdateRequest:
    properties:
      operation:
        enum:
        - add
        - subtract
        - set
        type: string
      product_id:
        type: string
      quantity:
        type: integer
    required:
    - operation
    - product_id
    - quantity
    type: object
host: localhost:8082
info:
  contact: {}
  description: This is a product service API for eCommerce application
  title: Product Service API
  version: "1.0"
paths:
  /products:
    get:
      description: Get paginated list of products
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      - description: Category filter
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with details
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete product details by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Delete product by ID
      tags:
      - products
    get:
      description: Get product details by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update product details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Update product
      tags:
      - products
  /products/check-stock:
    post:
      consumes:
      - application/json
      description: Check the stock of product
      parameters:
      - description: CheckStock data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.StockCheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Check stoke of a new product
      tags:
      - products
  /products/reserve-stock:
    post:
      consumes:
      - application/json
      description: Check the stock of product
      parameters:
      - description: CheckStock data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.StockUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Check stoke of a new product
      tags:
      - products
  /products/search:
    get:
      description: Search products by name or description
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Search products
      tags:
      - products
swagger: "2.0"
